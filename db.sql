CREATE SCHEMA FULL_UNIVERSIDAD
set search_path = full_universidad, public;

CREATE TABLE LIBROS (
  idLIBROS INTEGER   NOT NULL ,
  TITULO VARCHAR(45)   NOT NULL ,
  EDITORIAL VARCHAR(45)   NOT NULL ,
  EDICION VARCHAR(45)      ,
PRIMARY KEY(idLIBROS));

CREATE TABLE FACULTADES (
  idFACULTADES INTEGER   NOT NULL ,
  NOMBRE VARCHAR(20)   NOT NULL   ,
PRIMARY KEY(idFACULTADES));

CREATE TABLE PERSONAS (
  DNI INTEGER   NOT NULL ,
  NOMBRE VARCHAR(20)   NOT NULL ,
  APELLIDO VARCHAR(20)   NOT NULL ,
  FECHA_NACIMIENTO DATE   NOT NULL ,
  TELEFONO INTEGER    ,
  DIRECCION VARCHAR(20)      ,
PRIMARY KEY(DNI));

CREATE TABLE MOVIMIENTOS (
  idMOVIMIENTOS INTEGER   NOT NULL ,
  FECHA   timestamp  NOT NULL ,
  ID_USER INTEGER   NOT NULL ,
  NOTA_INI INTEGER   NOT NULL ,
  NOTA_FIN INTEGER   NOT NULL   ,
PRIMARY KEY(idMOVIMIENTOS));

CREATE TABLE ASIGNATURA (
  idASIGNATURA INTEGER   NOT NULL ,
  NOMBRE VARCHAR(20)   NOT NULL ,
  INTENCIDAD_H INTEGER   NOT NULL ,
  CREDITOS INTEGER  DEFAULT 3 NOT NULL   ,
PRIMARY KEY(idASIGNATURA));

CREATE TABLE EJEMPLARES (
  idEJEMPLARES INTEGER   NOT NULL ,
  idLIBROS INTEGER   NOT NULL ,
  NUMERO_E INTEGER      ,
PRIMARY KEY(idEJEMPLARES)  ,
  FOREIGN KEY(idLIBROS)
    REFERENCES LIBROS(idLIBROS));

CREATE TABLE CARRERA (
  idCARRERA INTEGER   NOT NULL ,
  idFACULTADES INTEGER   NOT NULL ,
  REG_CALIF VARCHAR(20)   NOT NULL ,
  NOMBRE VARCHAR(20)   NOT NULL   ,
PRIMARY KEY(idCARRERA)    ,
  FOREIGN KEY(FACULTADES_idFACULTADES)
    REFERENCES FACULTADES(idFACULTADES),
  FOREIGN KEY(PERSONAS_DNI)
    REFERENCES PERSONAS(DNI));

CREATE TABLE GRUPOS (
  idGRUPO INTEGER   NOT NULL ,
  idASIGNATURA INTEGER   NOT NULL   ,
PRIMARY KEY(idGRUPO)  ,
  FOREIGN KEY(idASIGNATURA)
    REFERENCES ASIGNATURA(idASIGNATURA));

CREATE TABLE PERSONAS_has_LIBROS (
  DNI INTEGER   NOT NULL ,
  idLIBROS INTEGER   NOT NULL   ,
PRIMARY KEY(DNI,idLIBROS)    ,
  FOREIGN KEY(DNI)
    REFERENCES PERSONAS(DNI),
  FOREIGN KEY(idLIBROS)
    REFERENCES LIBROS(idLIBROS));

CREATE TABLE PROFESORES (
  idPROFESORES INTEGER   NOT NULL ,
  idFACULTADES INTEGER   NOT NULL ,
  PERSONAS_DNI INTEGER   NOT NULL ,
  PROFESION VARCHAR(20)   NOT NULL   ,
PRIMARY KEY(idPROFESORES)    ,
  FOREIGN KEY(PERSONAS_DNI)
    REFERENCES PERSONAS(DNI),
  FOREIGN KEY(idFACULTADES)
    REFERENCES FACULTADES(idFACULTADES));

CREATE TABLE PROFESORES_has_GRUPOS (
  idPROFESORES INTEGER   NOT NULL ,
  idGRUPO INTEGER   NOT NULL ,
  HORARIO VARCHAR(45)      ,
PRIMARY KEY(idPROFESORES, idGRUPO)    ,
  FOREIGN KEY(idPROFESORES)
    REFERENCES PROFESORES(idPROFESORES),
  FOREIGN KEY(idGRUPO)
    REFERENCES GRUPOS(idGRUPO));

CREATE TABLE ESTUDIANTES (
  COD INTEGER   NOT NULL ,
  idCARRERA INTEGER   NOT NULL ,
  DNI INTEGER   NOT NULL   ,
PRIMARY KEY(COD)    ,
  FOREIGN KEY(DNI)
    REFERENCES PERSONAS(DNI),
  FOREIGN KEY(idCARRERA)
    REFERENCES CARRERA(idCARRERA));

CREATE TABLE EJEMPLARES_has_ESTUDIANTES (
  idEJEMPLARES INTEGER   NOT NULL ,
  COD INTEGER   NOT NULL ,
  FECHA_INI DATE   NOT NULL ,
  FECHA_FIN DATE   NOT NULL   ,
PRIMARY KEY(idEJEMPLARES, COD)    ,
  FOREIGN KEY(idEJEMPLARES)
    REFERENCES EJEMPLARES(idEJEMPLARES),
  FOREIGN KEY(COD)
    REFERENCES ESTUDIANTES(COD));

CREATE TABLE ESTUDIANTES_has_GRUPOS (
  COD INTEGER   NOT NULL ,
  idGRUPO INTEGER   NOT NULL ,
  NOTA1 FLOAT    ,
  NOTA2 FLOAT    ,
  NOTA3 FLOAT      ,
PRIMARY KEY(COD, idGRUPO)    ,
  FOREIGN KEY(COD)
    REFERENCES ESTUDIANTES(COD),
  FOREIGN KEY(idGRUPO)
    REFERENCES GRUPOS(idGRUPO));


CREATE VIEW List_Estudiante_por_Gruop AS
SELECT COD, (SELECT NOMBRE FROM personas) AS NOMBRE, IDGRUPO FROM estudiantes_has_grupos

CREATE VIEW List_Libros AS
select nombre,titulo from personas_has_libros
INNER join full_universidad.personas USING(dni)
INNER join full_universidad.libros USING(idlibros)

CREATE VIEW Notas_Estudiante AS
select cod,(SELECT nombre  from personas)as nombre ,nota1,nota2,nota3 from estudiantes_has_grupos

CREATE VIEW Libros_Prestados AS
SELECT cod,(SELECT nombre  from personas),fecha_ini,fecha_fin,idejemplares 
from ejemplares_has_estudiantes


CREATE ROLE COORDINADOR;
GRANT ALL ON ESTUDIANTES TO COORDINADOR;
GRANT ALL ON PROFESORES TO COORDINADOR;
GRANT ALL ON ESTUDIANTES_has_GRUPOS TO COORDINADOR;
GRANT ALL ON PROFESORES_has_GRUPOS TO COORDINADOR;
GRANT ALL ON PERSONAS TO COORDINADOR;

CREATE ROLE PROFESOR;
GRANT ALL ON PROFESORES TO PROFESOR;
GRANT ALL ON PERSONAS TO PROFESOR;


CREATE ROLE ESTUDIANTE;
GRANT ALL ON PERSONAS TO ESTUDIANTE;

CREATE ROLE BIBLIOTECARIO;
GRANT ALL ON LIBROS TO BIBLIOTECARIO;
GRANT SELECT, INSERT, UPDATE ON EJEMPLARES_has_ESTUDIANTES TO BIBLIOTECARIO;
GRANT ALL ON EJEMPLARES TO BIBLIOTECARIO;
GRANT ALL ON PERSONAS TO BIBLIOTECARIO;


CREATE OR REPLACE FUCTION create_user_estudent() RETURNS VOID AS $$
DECLARE x "NOMBRE" % Rowtype;
BEGIN
  FOR x IN SELECT * FROM "PERSONAS"
  LOOP
    IF X == 
	
	
CREATE OR REPLACE FUNCTION public.create_databaseuser(
v_username NAME,
v_password TEXT)
RETURNS smallint AS
$BODY$
DECLARE
BEGIN
    EXECUTE FORMAT('CREATE ROLE "%I" LOGIN PASSWORD ''%L''', v_username, v_password);
    RETURN 1;
    -- Simple Exception
EXCEPTION
    WHEN others THEN
        RETURN 0;
END;
$BODY$
LANGUAGE plpgsql STRICT VOLATILE SECURITY DEFINER
COST 100;

ALTER FUNCTION public.create_databaseuser(NAME, TEXT) OWNER TO postgres;
